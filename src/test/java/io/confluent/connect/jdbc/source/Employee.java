/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.connect.jdbc.sink;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"fields\":[{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
    @Deprecated public java.lang.CharSequence firstName;
    @Deprecated public java.lang.CharSequence lastName;
    @Deprecated public int age;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Employee() {}

    /**
     * All-args constructor.
     */
    public Employee(java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.Integer age) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return firstName;
            case 1: return lastName;
            case 2: return age;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: firstName = (java.lang.CharSequence)value$; break;
            case 1: lastName = (java.lang.CharSequence)value$; break;
            case 2: age = (java.lang.Integer)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'firstName' field.
     */
    public java.lang.CharSequence getFirstName() {
        return firstName;
    }

    /**
     * Sets the value of the 'firstName' field.
     * @param value the value to set.
     */
    public void setFirstName(java.lang.CharSequence value) {
        this.firstName = value;
    }

    /**
     * Gets the value of the 'lastName' field.
     */
    public java.lang.CharSequence getLastName() {
        return lastName;
    }

    /**
     * Sets the value of the 'lastName' field.
     * @param value the value to set.
     */
    public void setLastName(java.lang.CharSequence value) {
        this.lastName = value;
    }

    /**
     * Gets the value of the 'age' field.
     */
    public java.lang.Integer getAge() {
        return age;
    }

    /**
     * Sets the value of the 'age' field.
     * @param value the value to set.
     */
    public void setAge(java.lang.Integer value) {
        this.age = value;
    }

    /** Creates a new Employee RecordBuilder */
    public static Employee.Builder newBuilder() {
        return new Employee.Builder();
    }

    /** Creates a new Employee RecordBuilder by copying an existing Builder */
    public static Employee.Builder newBuilder(Employee.Builder other) {
        return new Employee.Builder(other);
    }

    /** Creates a new Employee RecordBuilder by copying an existing Employee instance */
    public static Employee.Builder newBuilder(Employee other) {
        return new Employee.Builder(other);
    }

    /**
     * RecordBuilder for Employee instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
            implements org.apache.avro.data.RecordBuilder<Employee> {

        private java.lang.CharSequence firstName;
        private java.lang.CharSequence lastName;
        private int age;

        /** Creates a new Builder */
        private Builder() {
            super(Employee.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(Employee.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.firstName)) {
                this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.lastName)) {
                this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.age)) {
                this.age = data().deepCopy(fields()[2].schema(), other.age);
                fieldSetFlags()[2] = true;
            }
        }

        /** Creates a Builder by copying an existing Employee instance */
        private Builder(Employee other) {
            super(Employee.SCHEMA$);
            if (isValidValue(fields()[0], other.firstName)) {
                this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.lastName)) {
                this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.age)) {
                this.age = data().deepCopy(fields()[2].schema(), other.age);
                fieldSetFlags()[2] = true;
            }
        }

        /** Gets the value of the 'firstName' field */
        public java.lang.CharSequence getFirstName() {
            return firstName;
        }

        /** Sets the value of the 'firstName' field */
        public Employee.Builder setFirstName(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.firstName = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'firstName' field has been set */
        public boolean hasFirstName() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'firstName' field */
        public Employee.Builder clearFirstName() {
            firstName = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'lastName' field */
        public java.lang.CharSequence getLastName() {
            return lastName;
        }

        /** Sets the value of the 'lastName' field */
        public Employee.Builder setLastName(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.lastName = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'lastName' field has been set */
        public boolean hasLastName() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'lastName' field */
        public Employee.Builder clearLastName() {
            lastName = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /** Gets the value of the 'age' field */
        public java.lang.Integer getAge() {
            return age;
        }

        /** Sets the value of the 'age' field */
        public Employee.Builder setAge(int value) {
            validate(fields()[2], value);
            this.age = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /** Checks whether the 'age' field has been set */
        public boolean hasAge() {
            return fieldSetFlags()[2];
        }

        /** Clears the value of the 'age' field */
        public Employee.Builder clearAge() {
            fieldSetFlags()[2] = false;
            return this;
        }

        @Override
        public Employee build() {
            try {
                Employee record = new Employee();
                record.firstName = fieldSetFlags()[0] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.lastName = fieldSetFlags()[1] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.age = fieldSetFlags()[2] ? this.age : (java.lang.Integer) defaultValue(fields()[2]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
